:coffeescript
  # Application Settings
  window.NAME = "interaction-app"
  window.VERSION = "1.0"
  window.socket = null
  window.editor = null
  EMULATOR_ON = false

  window.emulateReading = ()->
    $(document).trigger "read-pressure", 
      data: [cb.setpoint + ((Math.random()*10) - 2.5), cb.setpoint + ((Math.random()*10) - 2.5), cb.setpoint + ((Math.random()*10) - 2.5), cb.setpoint + ((Math.random()*10) - 2.5)]
          
  $ -> 
    console.log "Interaction Design App Initialized"
    window.cb = new Compressable(window.socket)
    window.gc = new GestureCanvas
      canvas: $("canvas")
    # Enable Touch Interactions
    $(document).on "contextmenu", (event)-> event.preventDefault(); return false;
    # Emergency Stop and Restart
    $('[action="restart"]').click ()-> window.cb.status = "ON"; 
    $('[action="pid_toggle"]').click ()-> 
      if window.cb.status == "PID"
        window.cb.status = "ON" 
      else
        window.cb.status = "PID" 
    $('[action="emergency_stop"]').click ()-> 
      window.cb.status = "STOPPED"; 
      window.cb.next_setpoint = 0;
      gc.clear()
    
    # Limit Settings
    $('[action="set_ul"]').on "swiperight", (event)-> window.cb.upper_limit = 100; 
    $('[action="set_ll"]').on "swiperight", (event)-> window.cb.lower_limit = -100; 
    $('[action="set_ul"]').on "taphold", (event)-> window.cb.upper_limit = window.cb.setpoint; 
    $('[action="set_ll"]').on "taphold", (event)-> window.cb.lower_limit = window.cb.setpoint; 
    $('[action="hand-toggle"]').click ()-> window.gc.layout = if window.gc.layout == "right-handed" then "left-handed" else "right-handed"; 
    $('[action="input-toggle"]').click ()-> window.gc.input = if window.gc.input == "instantaneous" then "temporal" else "instantaneous"; 
    $('[action="save"]').click ()-> gc.load($(this).attr("save_id"));
    $('[action="save"]').on "taphold", ()-> gc.save($(this).attr("save_id"));
    $('[action="save"]').on "swiperight", ()-> gc.clear_save($(this).attr("save_id"));
    
    $('#send').click ()-> 
      commands = gc.command()
      scrubber = paper.project.getItem
        name: "scrubber"
      if not scrubber then return

      # live = paper.project.getItem
      #   name: "live"
      # if live
      #   live.remove()
      # live = new paper.Path
      #   name: "live"
      #   strokeColor: "blue"
      #   strokeWidth: 2


      _.each commands, (c)->
        # console.log "Sending", c[1], c[0]
        _.delay (()-> scrubber.to(c[0]); window.cb.setpoint = c[1]), c[0]
        # _.delay (()-> scrubber.to(c[0]); scrubber.addPoint(live); window.cb.setpoint = c[1]), c[0]
      
    # Live pressure readings
    $(document).on "behavior", (event, msg)-> 
      console.log "Calling behavior", msg["index"].toLowerCase()
      if msg["index"]
        gc.load(msg["index"].toLowerCase())
        $('#send').click()
    $(document).on "read-pressure", (event, msg)-> 
      sum = _.reduce(data = msg.data, ((x, memo)-> memo = memo + x), 0 )
      window.cb.pressure = sum / msg.data.length # average value of data packet

    # Emulation
    if(EMULATOR_ON) then setInterval(emulateReading, 250) # simulate a reading every 250 ms

    # Initial view update; needs to be called whenever state changes.
    cb.status = "ON"
    cb.upper_limit = 100
    cb.lower_limit = -100
    cb.setpoint = 49
    cb.next_setpoint = 1
    cb.pressure = 123
    gc.input = "instantaneous"

        
/ IoT Websocket

.ui.container.mobile.f
  #server-control.ccfs.f
    .ui.segment.attached
      %form.ui.form.server-control.tiny.equal.width
        .two.fields
          .two.field
            %label HAWS LOCAL
            .ui.labeled.input
              .ui.label ws://   
              %input.param{type:"text", name:"host", value:"162.243.120.86"}
            %label PORT
            %input.param{type:"number", name:"port", value: 3001}
          .field
            %label &nbsp;
            %button.connect.blue.ui.button.small.fluid{type:"submit"}
              CONNECT
  .ui#controller.left-handed.cc.f
    .settings.ccfe
      .ui.crc
        - if true
          .ui.button.black.fluid.massive{action: "save", save_id: 'a'} A
          .ui.button.black.fluid.massive{action: "save", save_id: 'b'} B
          .ui.button.black.fluid.massive{action: "save", save_id: 'c'} C
          .ui.button.black.fluid.massive{action: "save", save_id: 'd'} D
          .ui.button.black.fluid.massive{action: "save", save_id: 'e'} E
      -if false
        .ui.button.fluid.large.purple{action: "pid_toggle"} HOLD
      .ui.button.fluid.large.purple{action: "hand-toggle"} CHANGE TO RIGHT-HAND
      .ui.button.fluid.large.blue{action: "input-toggle"} CHANGE TO TIME INPUT MODE
      .ui.button.badged.massive.yellow{action: "set_ul"}
        SET UPPER LIMIT
        %span.badge 134
    .ui.segment#input.crc{mode: "temporal"}
      .canvas-container
        %label.instantaneous Swipe up or down to set a new target pressure. Hit send when ready.
        %label.temporal Draw a 5 second wave.
        %canvas
        #send.icon.cc
          %i.icon.send
      .state.cc
        .reading.cc.blue
          %label.sublabel STATUS
          %label.status ON
        .reading.cc.blue
          %label.sublabel POWER
          %label.setpoint 130
          %label.next_setpoint (+3)
        .reading.cc
          %label.sublabel PRESSURE
          %label.process_value 124
    .settings.ccfs
      .ui.button.badged.massive.yellow.fluid{action: "set_ll"}
        SET LOWER LIMIT
        %span.badge 120
      .ui.button.massive.red.fluid{action: "emergency_stop"}
        EMERGENCY STOP
      .ui.button.massive.red.fluid{action: "restart"}
        RESTART

:scss
  [mode="instantaneous"] label.instantaneous{
    display: block;
  }
  [mode="temporal"] label.instantaneous{
    display: none;
  }
  [mode="temporal"] label.temporal{
    display: block;
  }
  [mode="instantaneous"] label.temporal{
    display: none;
  }

  .sublabel{
    font-size: 0.5em;
    font-weight: normal;
    margin-bottom: 4px;
  }
  .state{

  }
  .settings .button{
    margin-right: 0px !important;
    border-radius: 0px !important;
    width: 100%;
  }
  .next_setpoint{
    color: #5CCA5B;
  }
  .right-handed .canvas-container label{
    pointer-events: none;
    position: absolute;
    top: 0px;
    left: 5px;
    font-size: 0.7em;
    line-height: 120%;
    margin: 20px 65px 20px 20px;
    font-weight: normal;
    background: rgba(255, 255, 255, 0.8);
  }
  .left-handed .canvas-container label{
    pointer-events: none;
    position: absolute;
    top: 0px;
    left: 5px;
    font-size: 0.7em;
    line-height: 120%;
    margin: 20px 20px 20px 65px;
    font-weight: normal;
    background: rgba(255, 255, 255, 0.8);
  }

  .canvas-container{
    width: 100%;
    height: calc(100% - 30px);
    position: relative;
  }
  .reading{
    margin-bottom: 8px;
    &.blue{
      color: #3A84EB;
    }
  }
  .left-handed #send{
    left: 5px;
    border-top-left-radius: 5px;
    border-bottom-left-radius: 5px;
  }
  .right-handed #send{
    right: 5px;
    border-top-right-radius: 5px;
    border-bottom-right-radius: 5px;
  }
  #send{
    z-index: 100;
    position: absolute;
    top: 0px;
    width: 40px;
    height: calc(100% - 0px) !important;
    background: #5CCA5B;
    padding: 0px 10px;
    color: white;
  }
  .left-handed canvas{
    margin-left: 40px !important;
  }
  .right-handed canvas{
    margin-right: 40px !important;
  }
  .settings{
    width: 100%;
  }
  #input{
    background: #333;
    height: 300px;
    width: 100%;
    canvas{
      width: calc(100% - 40px);
      height: 100%;
      background: white;
      border-radius: 5px;
    }
    .state{
      width: 30%;
      color: white!important;
      font-size: 1.5em;
    }
  }
  .mobile:not(.connected){
    #controller{opacity: 0;}
  }
  .connected{
    #server-control{ display:none; }
  }

  .ui.button.badged{
    display: flex !important;
    flex-flow: row nowrap !important;
    justify-content: space-between !important;
    align-items: center !important;
  }
  span.badge{
    padding: 6px 8px !important;
    background: white !important;
    border-radius: 15px !important;
    color: black !important;
    margin-left: 10px;
  }
  #controller{
    height: calc(100% - 44px) !important;
    margin-top: 0px !important;
    background: #00A8E1;
  }
  .stopped .button[action="emergency_stop"]{
    display: none !important;
  }
  .stopped .button[action="restart"]{
    display: block !important;
    background: #5CCA5B;
  }
  .button[action="restart"]{
    display: none !important;
  }

  /* Disable buttons when stopped */
  .stopped .button:not([action="restart"]){
    background: #999 !important;
    color: #DDD !important;
    -webkit-tap-highlight-color: transparent;
    -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
    -webkit-touch-callout: none; /* iOS Safari */
      -webkit-user-select: none; /* Safari */
       -khtml-user-select: none; /* Konqueror HTML */
         -moz-user-select: none; /* Old versions of Firefox */
          -ms-user-select: none; /* Internet Explorer/Edge */
              user-select: none; /* Non-prefixed version, currently*/
    .badge{
      background: #DDD ! important;
      color: #333 !important;
    }
  }
  .stopped .canvas-container{
    display:none;
  }

 

        
